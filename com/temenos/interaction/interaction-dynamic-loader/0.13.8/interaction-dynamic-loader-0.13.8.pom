<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.temenos.interaction</groupId>
		<artifactId>interaction-parent</artifactId>
		<version>0.13.8</version>
		<relativePath>../interaction-parent/pom.xml</relativePath>
	</parent>

    <!-- The next section of the pom is to call Ant from Maven.
         The intent is to create the jar files required for the tests.
         The tests are the Annotation Command Controller test and the 
         Dynamic Command Loader test -->

	<build>
		<plugins>

			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.8</version>
				<executions> 
					<execution>
					<!-- The next two lines control at which point in the build process Ant gets called.
					     The phases are defined by Maven. -->
						<id>test-compile</id>
						<phase>test-compile</phase>
						<configuration>
							<skip>${skipCheckout}</skip>
							<target>
								<ant antfile="build.xml" target="main">
									<reference torefid="maven.compile.classpath" refid="maven.compile.classpath" />
								</ant>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>

				<dependencies>
					<dependency>
						<groupId>org.apache.ant</groupId>
						<artifactId>ant</artifactId>
						<version>1.9.6</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-antrun-plugin
										</artifactId>
										<versionRange>
											[1.8,)
										</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

    <!-- This is the end of the section to call Ant from Maven -->

	<artifactId>interaction-dynamic-loader</artifactId>
	<name>interaction-dynamic-loader</name>
	<description>Interaction DSL using Spring</description>
	<packaging>jar</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>com.temenos.interaction</groupId>
			<artifactId>interaction-springdsl</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.1</version>
			<type>jar</type>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-all</artifactId>
			<version>1.9.5</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.temenos.interaction</groupId>
			<artifactId>interaction-odata4j-ext</artifactId>
		</dependency>
		<dependency>
			<groupId>com.temenos.interaction</groupId>
			<artifactId>interaction-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<groupId>org.reflections</groupId>
			<artifactId>reflections</artifactId>
			<version>0.9.10</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.10</version>
		</dependency>

	</dependencies>

    <!-- SONAR TEST COVERAGE PROFILE-->
	<profiles>
		<profile>
			<id>coverage</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.13</version>
						<configuration>
							<argLine>${jacoco.agent.ut.arg}</argLine>
                            <!-- Specific to generate mapping between tests and covered code -->
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.16</version>
						<configuration>
							<argLine>-Xmx1024m -XX:MaxPermSize=256m ${jacoco.agent.it.arg}</argLine>
                            <!-- Specific to generate mapping between tests and covered code -->
							<properties>
								<property>
									<name>listener</name>
									<value>org.sonar.java.jacoco.JUnitListener</value>
								</property>
							</properties>
                            <!-- Let's put failsafe reports with surefire to have access to tests failures/success reports in sonar -->
							<reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<version>${jacoco.version}</version>
						<executions>
                            <!-- Prepares a variable, jacoco.agent.ut.arg, that contains the info to be passed to the JVM hosting the code
                            being tested. -->
							<execution>
								<id>prepare-ut-agent</id>
								<phase>process-test-classes</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.reportPath}</destFile>
									<propertyName>jacoco.agent.ut.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
                            <!-- Prepares a variable, jacoco.agent.it.arg, that contains the info to be passed to the JVM hosting the code
                            being tested. -->
							<execution>
								<id>prepare-it-agent</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.itReportPath}</destFile>
									<propertyName>jacoco.agent.it.arg</propertyName>
									<append>true</append>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
			<dependencies>
				<dependency>
					<groupId>org.codehaus.sonar-plugins.java</groupId>
					<artifactId>sonar-jacoco-listeners</artifactId>
					<version>${sonar-jacoco-listeners.version}</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>org.codehaus.sonar-plugins.java</groupId>
					<artifactId>sonar-jacoco-plugin</artifactId>
					<version>${sonar-jacoco-plugin.version}</version>
				</dependency>
			</dependencies>
		</profile>
	</profiles>
</project>
